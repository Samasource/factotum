#!/usr/bin/env bash
# This go template is used by install script to render the factotum launch
# script that gets installed to /usr/local/bin on local machine.
# See README.md for details, specifically section "How factotum
# bootstrapping, installation and launching works"

export DOCKER_IMAGE="{{.Env.DOCKER_IMAGE}}"
export DOCKER_TAG="{{.Env.DOCKER_TAG}}"
export DOCKER_IMAGE_TAG=$DOCKER_IMAGE:$DOCKER_TAG 
export FACTOTUM_PORT=${FACTOTUM_PORT:-$((30000 + $$ % 30000))}
readonly OS=$(uname -s)
export USER_ID=$(id -u)
export GROUP_ID=$(id -g)
export options=()
export targets=()

function require_installed() {
	if ! which $1 >/dev/null; then
		echo "Cannot find $1 installed on this system. Please install and try again."
		exit 1
	fi
}

function log_verbose() {
  [[ $VERBOSE == "true" ]] && echo $@
}

function run() {
  log_verbose \$ $@
  [[ $DRY_RUN == "true" ]] || "$@"
}

# This allows to pass arguments to factotum in the form --my-env-var=value and
# they will be converted and exported as MY_ENV_VAR="value"
function options_to_env() {
	local kv
	local k
	local v

	for option in ${options[@]}; do
		kv=(${option/=/ })
		k=${kv[0]}                                # Take first element as key
		k=${k#--}                                 # Strip leading --
		k=${k//-/_}                               # Convert dashes to underscores
		k=$(echo $k | tr '[:lower:]' '[:upper:]') # Convert to uppercase (bash3 compat)

		v=${kv[1]}   # Treat second element as value
		v=${v:-true} # Set it to true for boolean flags

		export $k="$v"
	done
}

function run_exit_hooks() {
	command -v factotum_on_exit >/dev/null && factotum_on_exit
}

function use() {
  DOCKER_CONTAINER="$APP_NAME-$CONTEXT"
	DOCKER_ARGS=()
  DOCKER_EXEC_ARGS=()
	if [[ -t 1 ]]; then
		# Running in terminal
		DOCKER_ARGS+=(-it --rm --name="${APP_NAME}" --env LS_COLORS --env TERM --env TERM_COLOR --env TERM_PROGRAM)

		if [[ -n "$SSH_AUTH_SOCK" ]]; then
			if [[ "${OS}" == 'Linux' ]]; then
				# Bind-mount SSH agent socket into container (linux only)
				DOCKER_ARGS+=(--volume "$SSH_AUTH_SOCK:$SSH_AUTH_SOCK"
					--env SSH_AUTH_SOCK
					--env SSH_CLIENT
					--env SSH_CONNECTION
					--env SSH_TTY
					--env USER
					--env USER_ID
					--env GROUP_ID)
			elif [[ "${OS}" == 'Darwin' && "${FACTOTUM_MAC_FORWARD_SOCKET}" == 'true' ]]; then
				# Bind-mount SSH-agent socket (available in docker-for mac Edge 2.2 release)
				# Note that the file/socket /run/host-services/ssh-auth.sock does not exist
				# on the host OS, it is in the Moby Linux VM in which the Docker daemon `dockerd` runs.
				# See https://github.com/docker/for-mac/issues/410#issuecomment-557613306
				# and https://docs.docker.com/docker-for-mac/osxfs/#namespaces
				DOCKER_ARGS+=(--volume /run/host-services/ssh-auth.sock:/run/host-services/ssh-auth.sock
					-e SSH_AUTH_SOCK=/run/host-services/ssh-auth.sock)
			fi
		fi
	fi

	if [[ "${WITH_DOCKER}" == "true" ]]; then
		# Bind-mount docker socket into container
		# Should work on Linux and Mac.
		# Note that the mounted /var/run/docker.sock is not a file or
		# socket in the Mac host OS, it is in the dockerd VM.
		# https://docs.docker.com/docker-for-mac/osxfs/#namespaces
		echo "# Enabling docker support. Be sure you install a docker CLI binary (apk add docker-cli)."
		DOCKER_ARGS+=(--volume "/var/run/docker.sock:/var/run/docker.sock")
		# Some reports say this is needed for Windows WSL
		if [[ $(uname -r) =~ Microsoft$ ]]; then
			DOCKER_ARGS+=(--user root)
		fi
		# NOTE: bind mounting the docker CLI binary is no longer recommended and usually does not work.
		# Use a docker image with a docker CLI binary installed that is appropriate to the image's OS.
	fi

	if [[ ${FACTOTUM_CUSTOMIZATION_DISABLED-false} == false ]]; then
		if [[ -n "${ENV_FILE}" ]]; then
			DOCKER_ARGS+=(--env-file ${ENV_FILE})
		fi

		# allow users to override value of FACTOTUM_DEFAULT_ENV_FILE
		local factotum_default_env_file=${FACTOTUM_DEFAULT_ENV_FILE:-~/.factotum/env}
		if [[ -f "${factotum_default_env_file}" ]]; then
			DOCKER_ARGS+=(--env-file=${factotum_default_env_file})
		fi
	else
		echo "# Disabling user customizations: FACTOTUM_CUSTOMIZATION_DISABLED is set and not 'false'"
		DOCKER_ARGS+=(--env FACTOTUM_CUSTOMIZATION_DISABLED)
	fi

	if [[ -n "$DOCKER_DNS" ]]; then
		DOCKER_ARGS+=("--dns=$DOCKER_DNS")
	fi

	DOCKER_ARGS+=(--privileged
		--publish $FACTOTUM_PORT:$FACTOTUM_PORT
		--name "$DOCKER_CONTAINER"
		--rm
		--env FACTOTUM_PORT=$FACTOTUM_PORT
		--env DOCKER_IMAGE="${DOCKER_IMAGE%:*}"
		--env APP_NAME="$APP_NAME"
		--env DOCKER_TAG="$DOCKER_TAG"
    --env "CONTEXT=$CONTEXT")

  # If current work dir is somewhere within $HOME,
  # try to restore equivalent work dir inside container
  WORK_DIR=$(pwd)
  if [[ $WORK_DIR == $HOME* ]]; then
    ARGS=(--env WORK_DIR=${WORK_DIR#$HOME})
    DOCKER_EXEC_ARGS+=(${ARGS[@]})
    DOCKER_ARGS+=(${ARGS[@]})
  fi

  # Mount volumes
  DOCKER_ARGS+=(--volume "$HOME:/local")
  for ITEM in $(sed '/^ *#/ d' $HOME/.factotum/config.yaml | \
      sed -n '/^volumes:$/,/^[^ ]/ p' | \
      sed -n '/^  / p' | \
      sed -n 's/^  //g p'| \
      sed -n 's/:[[:space:]]*/:/g p' | \
      sed -n 's:$HOME:'$HOME':g p'); do
    DOCKER_ARGS+=(--volume "$ITEM")
  done

	trap run_exit_hooks EXIT
	# the extra curly braces around .ID are because this file gets rendered as a go template before being installed as a shell script
	container_id=$(docker ps --quiet --filter name="^/${DOCKER_CONTAINER}\$" --format '{{`{{ .ID }}`}}')
	if [[ -n "$container_id" ]]; then
		echo "# Attaching to existing ${DOCKER_CONTAINER} session ($container_id)"
		run docker exec -it "${DOCKER_EXEC_ARGS[@]}" "${DOCKER_CONTAINER}" zsh
	else
		echo "# Starting new ${DOCKER_CONTAINER} session from ${DOCKER_IMAGE}"
		echo "# Exposing port ${FACTOTUM_PORT}"
		run docker run "${DOCKER_ARGS[@]}" ${DOCKER_IMAGE}
	fi
}

function parse_args() {
	while [[ $1 ]]; do
		case "$1" in
		-h | --help)
			targets+=("help")
			shift
			;;
		-v | --verbose)
			export VERBOSE=true
			shift
			;;
		--dry-run)
			export DRY_RUN=true
			export VERBOSE=true
			shift
			;;
		--*)
			options+=("${1}")
			shift
			;;
		--) # End of all options
			shift
			;;
		-*)
			echo "Error: Unknown option: $1" >&2
			exit 1
			;;
		*=*)
			declare -g "${1}"
			shift
			;;
		*)
			targets+=("${1}")
			shift
			;;
		esac
	done
}

function uninstall() {
	echo "# Uninstalling ${APP_NAME}..."
	docker rm -f ${APP_NAME} >/dev/null 2>&1 || true
	docker rmi -f ${DOCKER_IMAGE} >/dev/null 2>&1 || true
	echo "# Not deleting $0"
	exit 0
}

function upgrade() {
	echo "# Installing latest version of factotum"

  # Start of bootstrap.sh
{{ file.Read "/templates/install/bootstrap.sh" | indent 2 }}
  # End of bootstrap.sh

	if [[ $? -eq 0 ]]; then
		echo "# ${DOCKER_IMAGE} has been upgraded."
		exit 0
	else
		echo "Failed to upgrade ${DOCKER_IMAGE}"
		exit 1
	fi
}

function login_ecr() {
	if [[ $(aws --version | grep aws-cli/1 | wc -l) -eq 1 ]]; then
		aws ecr get-login --no-include-email --region us-east-1
	else
		aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 000000000000.dkr.ecr.us-east-1.amazonaws.com >&2
	fi
}

function stop() {
  DOCKER_CONTAINER="$APP_NAME-$CONTEXT"
	echo "# Stopping ${DOCKER_CONTAINER}..."
	docker kill ${DOCKER_CONTAINER} >/dev/null 2>&1
}

function get_contexts() {
  grep ' name: ' $HOME/.factotum/config.yaml | sed -e 's/.*name: \(.*\)/\1/'
}

BLUE=$'\e[1;34m'
RESET=$'\e[0m'

function help() {
	echo "Usage: $(basename $0) [target] ARGS"
	echo
	echo "  Targets:"
  echo "    use ${BLUE}CONTEXT${RESET}    Start factotum shell configured for given context"
	echo "    stop ${BLUE}CONTEXT${RESET}   Stop a running shell for given context"
	echo "    upgrade        Upgrade factotum to latest version"
	echo "    uninstall      Remove factotum image"
	echo "    login ecr      Login to ECR, must be called as \$(factotum login ecr)"
  echo "    get contexts   List contexts defined in your ~/.factotum/config.yaml file"
	echo
	echo "  Arguments:"
	echo "    --env-file=... Pass an environment file containing key=value pairs"
	echo
  echo -e "  Contexts:$BLUE"
  get_contexts | sed -e 's/^/    /'
	echo -e "$RESET"
}

require_installed tr
require_installed grep

parse_args "$@"
options_to_env

# Ensure HOME var is defined
if [[ -z $HOME ]]; then
  echo "Missing HOME env var"
  exit 1
fi

# Docker settings
export DOCKER_TAG=${DOCKER_TAG:-"{{.Env.DOCKER_TAG}}"}
export DOCKER_IMAGE=${DOCKER_IMAGE:-"{{.Env.DOCKER_IMAGE}}"}:${DOCKER_TAG}
export APP_NAME="{{.Env.APP_NAME}}"

if [[ -n "${PORT}" ]]; then
	export FACTOTUM_PORT=${PORT}
fi

export DOCKER_DNS=${DNS:-${DOCKER_DNS}}

if [[ "${FACTOTUM_SHELL}" == "true" ]]; then
	echo "Cannot run while in a factotum shell"
	exit 1
fi

require_installed docker

docker ps >/dev/null 2>&1
if [[ $? -ne 0 ]]; then
	echo "Unable to communicate with docker daemon. Make sure your environment is properly configured and then try again."
	exit 1
fi

if [[ -z "$targets" ]]; then
	# Execute default target
	targets=("help")
fi

target0=${targets[0]}
target1=${targets[1]}

if [[ "$target0" == "upgrade" ]]; then
  upgrade
  exit
elif [[ "$target0" == "uninstall" ]]; then
  uninstall
  exit
elif [[ "$target0" == "login" && "$target1" == "ecr" ]]; then
  login_ecr
  exit
elif [[ "$target0" == "get" && (( "$target1" == "contexts" || "$target1" == "context" )) ]]; then
  get_contexts
  exit
else
  if [[ "$target0" == "use" || "$target0" == "stop" ]]; then
    if [[ ${#targets[@]} < 2 ]]; then
      echo "Missing context argument"
    else
      export CONTEXT=$target1
      get_contexts | grep $CONTEXT > /dev/null
      if [[ $? != 0 ]]; then
        echo "Invalid context: $CONTEXT"
      elif [[ "$target0" == "use" ]]; then
        use
        exit
      elif [[ "$target0" == "stop" ]]; then
        stop
        exit
      fi
    fi
  fi
fi

help
exit 1